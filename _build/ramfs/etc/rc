#!/bin/sh
basemounts(){
  export TERM=linux-color PATH=/bin HOME=/root LD_LIBRARY_PATH=/lib TMP=/run TMPDIR=/run
  export USPLASH_SOCK=/run/usplash
  local B=busybox dev= mod=
  $B --install /bin
  $B mount -t devtmpfs null   $1/dev     2>/dev/null
  $B mount -t sysfs    null   $1/sys     2>/dev/null
  $B mount -t proc     null   $1/proc    2>/dev/null
  $B mount -t tmpfs   tmpfs   $1/run     2>/dev/null
  $B sysctl -w kernel.printk="3 4 1 3" >/dev/null 2>&1
  # remount root if necessary
  $B touch /test 2>/dev/null && $B rm /test ||
  $B mount -o remount,rw /
  $B ln    -sf /proc/mounts /etc/mtab
  $B stty  -F $($B tty) speed 115200   >/dev/null 2>&1
  $B mkdir -p                 $1/dev/pts
  $B mount -t devpts   null   $1/dev/pts 2>/dev/null
  # i hate /tmp but it's still hardcoded in some debian packages
  $B ln -sf $1/run            $1/tmp
  # i'm kinda used to these
  $B ln -sf $1/proc/self/fd/0 $1/dev/stdin
  $B ln -sf $1/proc/self/fd/1 $1/dev/stdout
  $B ln -sf $1/proc/self/fd/2 $1/dev/stderr
  for mod in usb-storage squashfs overlay xts aes ctr cbc sha256 dm-crypt; do
    $B modprobe $mod >/dev/null 2>&1; done;
  exec /bin/usplash \
    -H "$(printf "\e[1;44;33m GEAR0x Initramfs")" \
    -F "$(printf "\e[1;44;34m GEAR0x a minimal hackable OS")" \
    -e "INIT_MODULE=gear0x . /etc/rc" -m; }


early_dropbear(){ { local p=/run/net/dropbear
  usplash -i ssh -t " starting ssh debug console " -a 'killall -9 dropbearkey dropbear'
  local pw=$(head -c /dev/random|awk '{print substr($1,1,8);}')
  echo root:$pw | chpasswd
  usplash -i ssh:info "login: root passwd: $pw"
  mkdir -p $p
  local key=$(
    dropbearkey -t ecdsa -s 521 -f $p/ecdsa_key 2>&1 |
    awk '/ingerprint/{gsub(/:/,"");print $3}')
  /bin/dropbear -a -r $p/ecdsa_key \
    -E -P $p/pid \
    >$p/log 2>&1
  usplash -i ssh -t ssh:$key -a ''; } & }

_load_fs_module(){
  $B grep -q $1 /proc/filesystems || $B modprobe $1; }

gear0x(){ local B=busybox MD5=$(busybox cat /gear_md5)
  _switch_to_gear(){
    usplash -i boot -t " switching to GEAR[$dev] " -a "df"
    $B mkdir /run/.work /run/.overlay /run/overlay
    $B mount -t overlay -o lowerdir=/run/rootfs,upperdir=/run/.overlay,workdir=/run/.work overlay /run/overlay
    $B cp -Rf /bin /lib /etc /run/.overlay/
    $B ln -sf /proc/mounts /run/overlay/etc/mtab
    local d; for d in run proc dev sys
     do $B mount -o bind /$d /run/overlay/$d
    done
    usplash -S /run/overlay -t 'INIT_MODULE=rc_d . /etc/rc'; }
  _find_gear(){
    for dev in $(ls /sys/class/block 2>/dev/null)
    do if [ "$($B head -c 100 /dev/$dev | $B md5sum | awk '{print $1}')" = $MD5 ]
      then $B mount /dev/$dev /run/rootfs >/dev/null 2>&1 && _switch_to_gear
      else
        $B mount /dev/$dev /run/rootfs >/dev/null 2>&1  &&
        [ -f "/run/rootfs/etc/release" ]                &&
        [ "cazuza" = "$(cat /run/rootfs/etc/release)" ] &&
        _switch_to_gear
        $B umount -f /run/rootfs >/dev/null 2>&1; fi; done; }
  usplash -i boot         -t " finding more GEAR ..." -a "INIT_MODULE=rescue . /etc/rc"
  usplash -i boot:rescue  -t "$(printf ' \x1b[1;43;37m rescue console \x1b[0m')" -a "INIT_MODULE=rescue . /etc/rc"
  usplash -i boot:debug   -t 'debug' -a "usplash -q '/bin/busybox sh'"
  usplash -i boot:reboot  -t 'reboot'                 -a "reboot -f"
  usplash -i boot:halt    -t 'halt'                   -a "halt -f"
  usplash -i net          -t "net[searching]"         -a ":"
  usplash -i crypto       -t "crypto[searching]"      -a "ugear cryptodetect"
  usplash -i crypto:mount -t "crypto[mount]"          -a "ugear cryptomount"
  cryptodetect
  $B mkdir -p /run/rootfs
  for mount_attempt in $(seq 1 3);do _find_gear; sleep 0.05; done; }

rc_d(){
  set_hostname
  early_dropbear
  hotplug
  for lib in $(ls /etc/rc.d|sort) # run rc-scripts
    do run_rc $lib; done
  if [ $$ -eq 1 ]    # if we are still the init process, it's our responsibility
  then rescue; fi; } # to spawn a shell. else the kernel would panic. (stupid :D)

rescue(){ local B=busybox
  usplash -q "export PS1='\x1b[1;37;43m RESUCE \x1b[0m ';
    reset; clear; $B sh;
    echo rebooting..........; $B reboot -f"; }

. /lib/u/gear
[ -n "$INIT_MODULE" ] && { $INIT_MODULE >/dev//null 2>&1 & } || basemounts
