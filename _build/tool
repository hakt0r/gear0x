#!/bin/sh
#
#  Buildtools for GEAR0x/cazuza
#
#   (c) 2015 Sebastian Glaser <anx>
#
#   RELEASED UNDER THE TERMS OF THE GNU GPLv3
#   see: README.md / LICENSE.md
#

_help(){ printf "
 Buildtools for GEAR0xFFF/cazuza - (c) 2015 Sebastian Glaser <anx>
 RELEASED UNDER THE TERMS OF THE GNU GPLv3 / see $0 -license

 USAGE: tool [OPTS] CMD [ARG] [...]
   -h               show help
   -license         show license info
   -lib             use when sourceing _build/tool (see example)
   -a DESTARCH      set $DESTARCH (x86_64|armpi2)
   -e CODE          eval shell script in CODE (after  _arch_init)
   -E CODE          eval shell script in CODE (before _arch_init)
   -d CODE          execute CODE in $DEBIAN  (chroot, emulation if necessary)
   -s CODE          execute CODE in $DESTDIR (chroot, emulation if necessary)
   -D DEVICE        set $DEVICE
   -S               select $DEVICE from list

  Rebuild GEAR0x
    $ $0 rebuild installer debug

  Update $DEBIAN with apt-get:
    $ $0 -d 'apt-get update'

  Using as lib:
    1 #!/bin/sh
    2 . ./_build/tool -lib
    3 _tool -S rebuild

"; }

_tool(){ local _loop_
  export BWD=$PWD BUILD=$PWD/_build HOSTARCH=$(uname -m)
  export BUSYBOX SOURCES DESTDIR SYSROOT DEVICE DESTARCH
  export DEBIAN DEBIAN_REPO
  [ -z "$DEBIAN_REPO" ] && DEBIAN_REPO="ftp://ftp.de.debian.org/debian/"
  [ -z "$VERBOSE" ] && VERBOSE=false
  . $BUILD/lib                     # source _build/lib
  _version                         # read current $VERSION and $RELEASE
                                   # require busybox
  [ -x "$BUSYBOX" ] || BUSYBOX=$BWD/$HOSTARCH/busybox/busybox
  [ -x "$BUSYBOX" ] || BUSYBOX=$(which busybox 2>&1)
  [ -x "$BUSYBOX" ] || { echo ERROR: please provide BUSYBOX; return 1 ; }
  _loop_=true; while $_loop_       # read early options
  do case "$1" in
    "-S") _select_device;     shift   ;;
    "-v") VERBOSE=true;       shift   ;;
    "-P") PRODUCT="$2";       shift 2 ;;
    "-D") DEVICE="$2";        shift 2 ;;
    "-a") DESTARCH="$2";      shift 2 ;;
    "-p") PHASES=$(echo $2 | tr , ' '); shift 2 ;;
    "-h") _help;             return 0 ;;
    "-E") shift; eval "$@"; return $? ;;
    *   ) _loop_=false;;
  esac; done
  [ -f _config ] && . _config      # determine DESTARCH
  [ -z "$PRODUCT" ]  && PRODUCT=generic
  [ -z "$DESTARCH" ] && DESTARCH=$(uname -m)
  [ -z "$DESTARCH" ] && { echo COULD NOT DETERMINE DESTARCH; return 1; }
  . $BUILD/arch/$DESTARCH/setup    # include arch/$DESTARCH files
  SOURCES=$BWD/$DESTARCH           # set DESTARCH-dependent variables
  DESTDIR=$SOURCES/stage
  DEBIAN=$SOURCES/debian
  SYSROOT=$SOURCES/sysroot
  mkdir -p $SOURCES $SYSROOT       # create $SOURCES (and dirs needed)
  _arch_hook crossinit             # activate cross compiler (if needed)
  _debroot                         # check for debroot
  _loop_=true; while $_loop_       # read late options
  do case "$1" in
    "-lib")                            return 0;;
    "-e") shift; eval "$@";            return $?;;
    "-d") _exec_debroot "$2"; shift 2 ;return $?;;
    "-b") _exec_destdir "$2"; shift 2 ;return $?;;
    "-D") DEVICE="$2";        shift 2 ;;
    "-p") PHASES=$(echo $2 | tr , ' '); shift 2 ;;
    "-v") VERBOSE=true;       shift   ;;
    "-S") _select_device;     shift   ;;
    *   ) _loop_=false;;
  esac; done
  case "$1" in                     # read and execute command
    "stick")      stick_$DESTARCH;;
    "splash")  shift; _splash  "$@";;
    "test")           _splash_test ;;
    "make")    shift; _make    "$@";;
    *)                _require "$@";;
  esac; }
_tool "$@" # HERE BE DRAGONS :>
