#!/bin/sh
#
#  Buildtools for GEAR0x/cazuza
#
#   (c) 2015 Sebastian Glaser <anx>
#
#   RELEASED UNDER THE TERMS OF THE GNU GPLv3
#   see: README.md / LICENSE.md
#

_help(){ printf "
 Buildtools for GEAR0xFFF/cazuza - (c) 2015 Sebastian Glaser <anx>
 RELEASED UNDER THE TERMS OF THE GNU GPLv3 / see $0 -license

 USAGE: tool [OPTS] CMD [ARG] [...]
   -h               show help
   -license         show license info
   -lib             use when sourceing _build/tool (see example)
   -a DESTARCH      set $DESTARCH (x86_64|armpi2)
   -e CODE          eval shell script in CODE (after  _arch_init)
   -E CODE          eval shell script in CODE (before _arch_init)
   -d CODE          execute CODE in $DEBROOT (chroot, emulation if necessary)
   -s CODE          execute CODE in $DESTDIR (chroot, emulation if necessary)
   -r [ OPTS ... ]  test KERNEL and IMAGE in qemu
   -D DEVICE        set $DEVICE
   -S               select $DEVICE from list

  Rebuild GEAR0x
    $ $0 rebuild installer debug

  Update $DEBROOT with apt-get:
    $ $0 -d 'apt-get update'

  Using as lib:
    1 #!/bin/sh
    2 . ./_build/tool -lib
    3 _tool -S rebuild 

"; }

_version(){ 
  export RELEASE=$(cat $BUILD/release 2>/dev/null || printf experiment)
  export VERSION=$(cat $BUILD/version 2>/dev/null || printf 0xDEADBEEF); }

_require(){
  _dots(){ c=2; [ -n "$2" ] && c=$2; awk 'BEGIN{printf "'"$1"'"}{if(i++%'"$c"'==0)printf "#"}'; }
  $VERBOSE && _dots(){ cat -; }
  __hook(){ local hook="$1"; shift
    if _exists $hook
    then 
      { $hook "$@"; [ $? -eq 0 ] && printf "[\e[32m$hook\e[0m]" || { printf "[\e[31m$hook\e[0m]"; return $?; }
      } | _dots "[\e[33m$hook\e[0m]"
    else return 0; fi; }
  __load(){
    depend(){ DEPEND=$(echo "$@"|awk -vd="$mod/" -vORS=' ' -vRS=' ' '
      BEGIN{IRS=" \n\t"}{gsub(/@/,d);print $1}'); }
    local d DEPEND
    local lib=$(readlink -f "$BUILD/$2")
    local name=$(basename "$lib")
    local target="$1"
    [ -d "$lib" ] && lib="$lib/$name"
    local dir=$(dirname "$lib")
    local dname=$(basename "$dir")
    printf "${_BPP}[\e[1;35m$name\e[0m]"; [ -z "${_BPP}" ] && _BPP="\n"
    [ -n "$lib" ]      || return 0 # if $lib or $target dont exist
    [ -r "$lib" ]      || return 0 # assume positive outcome
    [ -n "$target" ]   || return 0 # e.g. return 0
    for d in $target pre$target post$target; do unset $d; done
    . $lib             || return 1 # source $lib
    DEPEND=$(echo $DEPEND)         # rewrap DEPEND
    __hook pre$target  || return 1 # run pre$target hook
    if [ "$target" = build -a "$dname" = "$name" ]
    then                           # copy skel items (on build, if available)
      for d in $(ls $BUILD/core/skel/)
      do if [ -d $dir/$d ]
        then cp -r $dir/$d $DESTDIR/ && printf "[\e[32m$d\e[0m]" || printf "[\e[31m$dir/$d[\e0m]"
    fi;done;fi
    if [ -n "$DEPEND" ]            # require dependencies
    then
      for d in $DEPEND
      do [ -n "$d" ] && (
        _BPP="${_BPP} " DEPEND= _require $target $d || return 1; )
    done; fi
    __hook $target     || return 1 # run $target hook
    __hook post$target || return 1; }
  local target=$1; shift           # accept multiple modules
  for mod in $@; do
    [ -z "$mod" ]           && continue
    __load "$target" "$mod" || return 1
  done; }

_rebuild(){
  [ -z "$PHASES" ] && local PHASES="build install image ramfs stick"
  local n phase PKGS="core $DESTARCH_PKGS $@"
  for phase in $PHASES
  do printf "$n[\e[1;44m%s\e[0m]" $phase
     _BPP="\n " _tool $phase $PKGS || return 1
     n="\n"
  done; }

_tool(){ local _loop_
  export BWD=$PWD BUILD=$PWD/_build HOSTARCH=$(uname -m)
  export BUSYBOX SOURCES DESTDIR DEBROOT SYSROOT DEVICE DESTARCH
  [ -z "$VERBOSE" ] && VERBOSE=false
  _version                         # read current $VERSION and $RELEASE
                                   # require busybox
  [ -x "$BUSYBOX" ] || BUSYBOX=$BWD/$HOSTARCH/stage/bin/busybox
  [ -x "$BUSYBOX" ] || BUSYBOX=$(which busybox 2>&1)
  [ -x "$BUSYBOX" ] || { echo ERROR: please provide BUSYBOX; return 1 ; }
  . $BUILD/lib                     # source _build/lib
  _loop_=true; while $_loop_       # read early options
  do case "$1" in
    "-S") _select_device;     shift   ;;
    "-v") VERBOSE=true;       shift   ;;
    "-D") DEVICE="$2";        shift 2 ;;
    "-a") DESTARCH=$2;        shift 2 ;;
    "-h") _help;             return 0 ;;
    "-E") shift; eval "$@"; return $? ;;
    *   ) _loop_=false;;
  esac; done
  [ -f _config ] && . _config      # determine DESTARCH
  [ -z $DESTARCH ] && DESTARCH=$(uname -m)
  [ -z $DESTARCH ] && { echo COULD NOT DETERMINE DESTARCH; return 1; }
  _arch_include                    # include arch/$DESTARCH files
  SOURCES=$BWD/$DESTARCH           # set DESTARCH-dependent variables
  DESTDIR=$SOURCES/stage
  DEBROOT=$SOURCES/debian
  SYSROOT=$SOURCES/sysroot
  mkdir -p $SOURCES $SYSROOT       # create $SOURCES (and dirs needed)
  _arch_hook __crossinit           # activate cross compiler (if needed)
  [ -d $DEBROOT ] ||               # check if $DEBROOT exists and is a directory
  _arch_hook __debroot             # else setup $DEBRROT ($DESTARCH debian chroot)
  _loop_=true; while $_loop_       # read late options
  do case "$1" in
    "-lib")                            return 0;;
    "-e") shift; eval "$@";            return $?;;
    "-r") shift; _run_kvm "$@";        return $?;;
    "-d") _exec_debroot "$2"; shift 2 ;return $?;;
    "-b") _exec_destdir "$2"; shift 2 ;return $?;;
    "-D") DEVICE="$2";        shift 2 ;;
    "-S") _select_device;     shift   ;;
    *   ) _loop_=false;;
  esac; done
  case "$1" in                     # read and execute command   
    "stick")      __stick_$DESTARCH;;
    "splash")  shift; _splash  "$@";;
    "test")           _splash_test ;;
    "rebuild") shift; _rebuild "$@";;
    *)                _require "$@";;
  esac; }
_tool "$@" # HERE BE DRAGONS :>
