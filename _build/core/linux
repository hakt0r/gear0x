#!/bin/sh
# gearos linux kernel buildscript

. $BUILD/arch/$DESTARCH
_arch_hook linux_setup
[ -n "$KERNEL_FORMAT" ] || KERNEL_FORMAT=bzImage
[ -n "$KERNEL_IMAGE"  ] || KERNEL_IMAGE=$SOURCES/linux/arch/$DESTARCH_COMMON/boot/$KERNEL_FORMAT
[ -n "$KERNEL_EMU"    ] || KERNEL_EMU=$KERNEL_IMAGE
export KERNEL_FORMAT KERNEL_IMAGE KERNEL_EMU

distclean(){ [ -z "$SOURCES" ] && return
  rm -rf $SOURCES/linux-headers $SOURCES/linux; }

clean(){ [ -z "$SOURCES" ] && return
  rm -rf $SOURCES/linux.img; }

deps(){
  _is_app bc || apt-get install bc build-essential
  [ -d $DEBIAN/lib/firmware ] ||
  _exec_debroot "apt-get install -y firmware-linux firmware-linux-free firmware-linux-nonfree \\
    alsa-firmware-loaders atmel-firmware bluez-firmware dahdi-firmware-nonfree                \\
    dns323-firmware-tools zd1211-firmware firmware-adi firmware-atheros firmware-bnx2         \\
    firmware-bnx2x firmware-brcm80211 firmware-ipw2x00 firmware-iwlwifi firmware-libertas     \\
    firmware-myricom firmware-netxen firmware-qlogic firmware-ralink firmware-realtek         \\
    firmware-ti-connectivity firmware-zd1211 libertas-firmware linux-wlan-ng-firmware         \\
    midisport-firmware prism2-usb-firmware-installer sigrok-firmware-fx2lafw >&2"
  _arch_hook linux_deps; }

build(){
  cp -rf $DEBIAN/lib/firmware $SOURCES/linux/lib/ && _ok firmware &&
  _arch_hook linux_install; }

install(){
  [ -f $SOURCES/linux.img ] && return
  ( cd $SOURCES/linux && mksquashfs ./ $SOURCES/linux.img -all-root -comp xz; )
  printf "${_BPP}\e[1;41m $SOURCES/linux.img \e[1;41m %s \e[0m\n" \
    $KERNEL_VERSION $DESTARCH $(du -h $SOURCES/linux.img|cut -f1) >&2; }
