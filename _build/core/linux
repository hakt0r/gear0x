#!/bin/sh
# gearos linux kernel buildscript

build(){
  _arch_hook config &&
  _arch_hook kernel &&
  _arch_hook sysroot; }

install(){
  mkdir -p $DESTDIR/lib/modules
  cp -r /lib/firmware $DESTDIR/lib/
  _arch_hook install; }

ramfs(){
  [ $KERNEL_FORMAT = blob ] || return 0
  cp $(find $FIRMWARE/modules/$KERNEL_VERSION \
    -name overlay.ko  -or \
    -name squashfs.ko -or \
    -name dm-crypt.ko) $RAMFS/; }

clean(){
  rm -rf $SYSROOT
  rm $KERNEL_IMAGE; }

# this is somewhat hooked :)

setup_default(){
  _git_source linux https://github.com/torvalds/linux; }

config_default(){
  [ -f $SOURCES/linux/.config ] && return 0
  cp $(_arch_file linux_config) $SOURCES/linux/.config
  _make -C $SOURCES/linux xconfig; }

kernel_default(){
  [ -f $KERNEL_IMAGE ] && return 0
  _make -C $SOURCES/linux bzImage modules; }

sysroot_default(){
  [ -d $SYSROOT/usr/include ] && return 0
  mkdir -p $SYSROOT
  _make -C $SOURCES/linux headers_install INSTALL_HDR_PATH=$SYSROOT; }

install_default(){
  [ -d $DESTDIR/lib/modules ] && return 0
  _make -C $SOURCES/linux modules_install INSTALL_MOD_PATH=$DESTDIR; }

deps_default(){ :; }

_arch_include linux

_is_app bc || apt-get install bc build-essential

_arch_hook deps
_arch_hook setup

[ -n "$KERNEL_FORMAT" ] || KERNEL_FORMAT=bzImage
[ -n "$KERNEL_IMAGE"  ] || KERNEL_IMAGE=$SOURCES/linux/arch/$DESTARCH_COMMON/boot/$KERNEL_FORMAT
[ -n "$KERNEL_EMU"    ] || KERNEL_EMU=$KERNEL_IMAGE

export KERNEL_FORMAT KERNEL_IMAGE KERNEL_EMU
