#!/bin/sh
{ export RAMFS=$SOURCES/initramfs
export EXTENSION=$DESTARCH
depend @linux @busybox @crypto @dropbear @net $RAMFS_MODULES @installer # @debug @ozh @node

deps(){
  _depend_apt_host mksquashfs squashfsutils
  _depend_apt_host parted;
  _depend_apt_host extlinux; }

tests(){ _run_kvm -x >&2; }

preramfs(){ local DESTDIR=$RAMFS
  # [ -f $SOURCES/usplash ] || _debroot_compile $BUILD/src/usplash.c $SOURCES/usplash
  rm -rf $DESTDIR $RAMFS.gz
  mkdir -p $DESTDIR;
  cp -rv $BUILD/core/*/  $DESTDIR/
  _arch_hook ramfs
  echo /lib > $DESTDIR/etc/ld.so.conf; }

ramfs(){ local DESTDIR=$RAMFS
  mkdir -p $DESTDIR/lib/modules/$KERNEL_VERSION
  cp -v $KERNEL_MODULES/modules.* $DESTDIR/lib/modules/$KERNEL_VERSION/  2>&1 | _dots
  # cp -rv $KERNEL_MODULES/* $DESTDIR/lib/modules/$KERNEL_VERSION/
  cp -rfv $DEBIAN/usr/lib/locale  $DESTDIR/lib/ 2>&1 | _dots
  cp -rfv $DEBIAN/sbin/ldconfig   $DESTDIR/bin/ 2>&1 | _dots
  ln -s / $DESTDIR/usr
  _steal_kmods $DESTDIR \
    virtio virtio_ring virtio_net virtio_scsi virtio_blk virtio_pci virtio_input virtio_gpu \
    qxl ttm e1000 syscopyarea sysfillrect sysimgblt i2c_piix4 pcspkr \
    ext4 usb_storage squashfs overlay xts aes ctr cbc sha256 \
    dm_crypt crc32 ccm lib80211_crypt_tkip lib80211_crypt_ccmp lib80211_crypt_wep \
    usbhid evdev xhci_hcd sdhci sdhci_acpi hid_multitouch i2c_hid \
    mmc_block fat vfat isofs md_mod thermal sd_mod sg efivars; }

postramfs(){ local DESTDIR=$RAMFS
( cd $DESTDIR
  _version_increment
  ldd /lib/* 2>&1 | grep 'not found' | sort | uniq | awk 'BEGIN{ORS=" "}{print $1}'
  head -n1 /etc/passwd > etc/passwd
  head -n1 /etc/group  > etc/group
  [ -d $BWD/_local ] && cp -r $BWD/_local/* ./
  local f; for f in version release
  do cat $BUILD/$f > etc/$f
  done
  echo $DESTARCH >etc/arch
  mkdir -p $SOURCES/release
  ldconfig -r $DESTDIR -c etc/ld.so.conf        &&
  #cp -rv $SOURCES/busybox         ./bin/        &&
  #cp $SOURCES/usplash     bin/                  &&
  mknod -m 660 dev/console c 5 1                &&
  mknod -m 660 dev/loop0   b 7 0                &&
  mknod -m 660 dev/ram     b 1 0                &&
  ln -s /etc/rc ./init                          &&
  _steal_app openssl mkfs.ext4 fsck.ext2 \
        switch_root fsck.ext4 sed tar ar        &&
  bash -n                         ./etc/rc      &&
  chmod a+x                       ./etc/rc      &&
  chmod a+x                       ./bin/*       &&
  find . | cpio -H newc -o | gzip >$RAMFS.gz; ) &&
  cp $RAMFS.gz $SOURCES/release/ && sync; }; }

stick(){
  [ -z "$DEVICE" ] && { echo no DEVICE:"'$DEVICE'"; return 0; }
  [ -w "$DEVICE" ] || { echo nw DEVICE:"'$DEVICE'"; return 1; }
  dd if=/dev/zero of=$DEVICE bs=1M count=1      &&
  cat /usr/lib/syslinux/mbr/mbr.bin >$DEVICE    &&
  sudo parted -ms $DEVICE mktable msdos         &&
  sudo parted -ms $DEVICE mkpart primary 1 500M &&
  sudo parted $DEVICE set 1 boot on             &&
  _arch_hook bootfs                             &&
  mkdir -p mnt                                  &&
  mount ${DEVICE}1         mnt                  &&
  cp -rf $DESTDIR/*        mnt/                 &&
  mkdir -p                 mnt/boot             &&
  cp    $KERNEL_IMAGE      mnt/boot/            &&
  cp    $RAMFS.gz          mnt/boot/            &&
  cp    $SOURCES/release/* mnt/boot/            &&
  _arch_hook bootloader && sync && umount mnt; }

bootfs_default(){
  mkfs.ext2 ${DEVICE}1; }
bootloader_default(){ printf \
'DEFAULT linux\nLABEL linux\n'\
'KERNEL /boot/%s\n'\
'APPEND quiet init=/etc/rc norootdev initrd=/boot/%s'\
 $(basename $KERNEL_IMAGE) $(basename $RAMFS.gz)\
> mnt/boot/extlinux.conf &&
  extlinux -i mnt/boot; }

preinstall(){
  _arch_hook install
  mkdir -p $DESTDIR/.gear
  ln -sf '.' $DESTDIR/usr
  # ln -sf '.' $DESTDIR/system # ??wtf
  echo $EXTENSION > $DESTDIR/.gear/extension; }

image(){
  # (: build squashfs-image :)
  printf "${_BPP}[\e[32mbuilding gearos/%s\e[0m] " $EXTENSION >&2
  ldconfig -r $DESTDIR -c $DESTDIR/etc/ld.so.conf
  rm -f  $SOURCES/$EXTENSION.img
  ( cd $DESTDIR; mksquashfs ./ $SOURCES/$EXTENSION.img -all-root -comp xz; )
  printf "${_BPP}\e[1;41m GEAR\e[44m%s\e[45m%s \e[0m $SOURCES/$EXTENSION.img \e[1;41m %s \e[0m\n" $VERSION $RELEASE $(du -h $SOURCES/$EXTENSION.img|cut -f1) >&2; }
