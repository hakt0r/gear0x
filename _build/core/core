#!/bin/sh

depend @linux @busybox @net @crypto @dropbear

export RAMFS=$SOURCES/initramfs

prebuild(){
  # (: reset build / copy skeleton :)
  rm -rf $DESTDIR
  rm -rf $DESTDIR
  mkdir -p $DESTDIR
  cp -R $BUILD/core/skel/* $DESTDIR/; }

postinstall(){
  # (: tweak skeleton :)
  echo /lib            > $DESTDIR/etc/ld.so.conf
  ln -s /run/mtab        $DESTDIR/etc/mtab
  head -n1 /etc/passwd > $DESTDIR/etc/passwd
  head -n1 /etc/group  > $DESTDIR/etc/group;
  [ -d $BWD/_local ] && cp -r $BWD/_local/* $DESTDIR/
  true; }

preramfs(){
  rm -rf $RAMFS $RAMFS.gz
  mkdir -p $RAMFS; }

postramfs(){ ( cd $RAMFS
  head -c100 $SOURCES/gearos.img                    |
  md5sum | awk '{print $1}'     > ./gear_md5       &&
  cp -rv $BUILD/core/initramfs/*  ./               &&
  cp -rv $SOURCES/busybox/busybox ./bin/           &&
  chmod a+x                       ./etc/rc         &&
  bash -n                         ./etc/rc         &&
  bin/busybox --install ./bin                      &&
  mknod -m 660 dev/console c 5 1                   &&
  mknod -m 660 dev/loop0   b 7 0                   &&
  mknod -m 660 dev/ram     b 1 0                   &&
  ln -s /etc/rc ./init                             &&
  find . | cpio -H newc -o | gzip >$RAMFS.gz; )
  sync; }

#   { cat - >$SOURCES/boot_test.c <<EOF
# #include <stdio.h>
# int main(int argc, char *argv[])
# {
#   printf("__hello_confusion__\n");
#   sleep(999999999);
# }
# EOF
#   _gcc --static $SOURCES/boot_test.c -o $RAMFS/init; } &&

preimage(){
  # (: here we count versions :D :)
  _version_increment
  echo $VERSION >$DESTDIR/etc/version
  echo $RELEASE >$DESTDIR/etc/release
  # (: setup /bin and /etc/rc :)
  chmod a+x $DESTDIR/etc/rc
  chmod a+x $DESTDIR/bin/*
  # (: setup /lib (ldconfig) :)
  # FIXME: ldconfig wont work for cross-compiling to armpi2
  ldconfig.real -r $DESTDIR -f etc/ld.so.conf -c etc/ld.so.cache
  # WORKAROUND: good old link-frenzy in /lib
  ( cd $DESTDIR/lib
    for lib in $(ls *.so.*)
    do local p=
      p=$(echo $lib | sed 's/.[0-9]\+.[0-9]\+.[0-9]\+$//'); [ -e "$p" ] || ln -s "$lib" "$p"
      p=$(echo $lib | sed 's/.[0-9]\+.[0-9]\+$//');         [ -e "$p" ] || ln -s "$lib" "$p"
      p=$(echo $lib | sed 's/.[0-9]\+$//');                 [ -e "$p" ] || ln -s "$lib" "$p"
    done; )
  # (: pack it up :)
  pack_$DESTARCH; }

image(){
  # (: build squashfs-image :)
  rm -f  $SOURCES/gearos.img
  ( cd $DESTDIR;
    $VEROSE &&
    mksquashfs ./ $SOURCES/gearos.img -all-root -comp xz -no-progress -info ||
    mksquashfs ./ $SOURCES/gearos.img -all-root -comp xz; )
  printf "\n\e[1;41m GEAR\e[44m%s\e[45m%s \e[0m $SOURCES/gearos.img \e[1;41m %s \e[0m\n" $VERSION $RELEASE $(du -h $SOURCES/gearos.img|cut -f1) >&2; }

tests(){ _run_kvm -x; }

poststick(){ stick_$DESTARCH; }
