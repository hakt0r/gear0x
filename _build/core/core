#!/bin/sh
depend @linux @busybox @net @crypto @dropbear

prebuild(){
  printf "[\e[32march\e[0m:$HOSTARCH:$DESTARCH]" >&2
  # (: reset build / copy skeleton :)
  rm -rf $DESTDIR
  rm -rf $DESTDIR
  mkdir -p $DESTDIR
  cp -R $BUILD/core/skel/* $DESTDIR/; }

postinstall(){
  printf "[\e[32march\e[0m:$HOSTARCH:$DESTARCH]" >&2
  # (: tweak skeleton :)
  echo /lib            > $DESTDIR/etc/ld.so.conf
  ln -s /run/mtab        $DESTDIR/etc/mtab
  head -n1 /etc/passwd > $DESTDIR/etc/passwd
  head -n1 /etc/group  > $DESTDIR/etc/group;
  [ -d $BWD/_local ] && cp -r $BWD/_local/* $DESTDIR/
  true; }

preimage(){
  # (: here we count versions :D :)
  _version_increment
  echo $VERSION >$DESTDIR/etc/version
  echo $RELEASE >$DESTDIR/etc/release
  # (: setup /bin and /etc/rc :)
  chmod a+x $DESTDIR/etc/rc
  chmod a+x $DESTDIR/bin/*
  # (: setup /lib (ldconfig) :)
  # FIXME: ldconfig wont work for cross-compiling to armpi2
  ldconfig.real -r $DESTDIR -f etc/ld.so.conf -c etc/ld.so.cache
  # WORKAROUND: good old link-frenzy in /lib
  ( cd $DESTDIR/lib
    for lib in $(ls *.so.*)
    do local p=
      p=$(echo $lib | sed 's/.[0-9]\+.[0-9]\+.[0-9]\+$//'); [ -e "$p" ] || ln -s "$lib" "$p"
      p=$(echo $lib | sed 's/.[0-9]\+.[0-9]\+$//');         [ -e "$p" ] || ln -s "$lib" "$p"
      p=$(echo $lib | sed 's/.[0-9]\+$//');                 [ -e "$p" ] || ln -s "$lib" "$p"
    done; )
  # (: pack it up :)
  __pack_$DESTARCH; }

preramfs(){ local ramfs=$SOURCES/initramfs
  rm -rf $ramfs $ramfs.gz
  mkdir -p $ramfs/dev; }

postramfs(){ local ramfs=$SOURCES/initramfs; ( 
  #cd $DESTDIR
  cd $ramfs; mkdir -p sys dev bin rootfs lib/modules
  head -c100 $SOURCES/gearos.img | md5sum | awk '{print $1}' >gear_md5
  echo '#!/bin/sh
mount -t devtmpfs null /dev 2>/dev/null
mount -t sysfs    null /sys 2>/dev/null
sh
sum=$(busybox cat gear_md5)
dev=$(ls /sys/class/block | busybox grep -qI $sum )
if [ -n "$dev" ]
then
  busybox modprobe squashfs                2>/dev/null
  busybox mount $line /rootfs              2>/dev/null &&
  exec busybox switch_root /rootfs /etc/rc 2>/dev/null
  echo ERROR: mounting $line ($dsum) on /rootfs failed
fi
echo Could not find GEAR0x ROOTFS
echo dropping to a shell; /bin/sh
echo rebooting..........; reboot -f
'>init; chmod a+x init
  cp $SOURCES/busybox/busybox ./bin/
  for t in echo test mount ln mkdir ash sh cat ls ; do ln bin/busybox bin/$t; done
  for t in null tty zero console
  do cp -a /dev/$t dev/$t; done
  find . | cpio -H newc -o | gzip -9 -n >$ramfs.gz; )
  sync
  #kvm -nographic \
  # -hda $SOURCES/gearos.img             \
  # -kernel $SOURCES/linux/$KERNEL_IMAGE \
  #-initrd $ramfs.gz                     \
  # -append "root=/dev/ram0 rootfstype=tmpfs rw console=ttyS0"
}

image(){
  printf "\n[\e[32march\e[0m:$HOSTARCH:$DESTARCH]" >&2
  # (: build squashfs-image :)
  rm -f  $SOURCES/gearos.img
  ( cd $DESTDIR; mksquashfs ./ $SOURCES/gearos.img -all-root -no-progress -info -comp xz; )
  printf "\n\e[1;41m GEAR\e[44m%s\e[45m%s \e[0m $SOURCES/gearos.img \e[1;41m %s \e[0m\n" $VERSION $RELEASE $(du -h $SOURCES/gearos.img|cut -f1) >&2; }
