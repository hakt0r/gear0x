#!/bin/sh
{ export RAMFS=$SOURCES/initramfs
export EXTENSION=$DESTARCH
depend @linux @busybox @usplash @crypto @dropbear @net $RAMFS_MODULES @installer # @debug @ozh @node

deps(){
  _depend_apt_host mksquashfs squashfsutils
  _depend_apt_host parted;
  _depend_apt_host extlinux; }

tests(){ _run_kvm -x >&2; }

preramfs(){ local DESTDIR=$RAMFS
  # [ -f $SOURCES/usplash ] || _debroot_compile $BUILD/src/usplash.c $SOURCES/usplash
  rm -rf $DESTDIR $RAMFS.gz
  mkdir -p $DESTDIR;
  cp -rv $BUILD/core/*/  $DESTDIR/
  _arch_hook ramfs
  echo /lib > $DESTDIR/etc/ld.so.conf; }

ramfs(){ local DESTDIR=$RAMFS
  mkdir -p $DESTDIR/lib/modules/$KERNEL_VERSION
  cp -v $KERNEL_MODULES/modules.* $DESTDIR/lib/modules/$KERNEL_VERSION/  2>&1 | _dots
  # cp -rv $KERNEL_MODULES/* $DESTDIR/lib/modules/$KERNEL_VERSION/
  cp -rfv $DEBIAN/usr/lib/locale  $DESTDIR/lib/ 2>&1 | _dots
  cp -rfv $DEBIAN/sbin/ldconfig   $DESTDIR/bin/ 2>&1 | _dots
  ln -s / $DESTDIR/usr
  _steal_kmods $DESTDIR $ARCH_KMODS \
    ext4 usb_storage squashfs overlay xts aes ctr cbc sha256 \
    dm_crypt crc32 ccm lib80211_crypt_tkip lib80211_crypt_ccmp lib80211_crypt_wep \
    usbhid evdev xhci_hcd sdhci sdhci_acpi hid_multitouch i2c_hid \
    mmc_block fat vfat isofs md_mod thermal sd_mod sg efivars; }

postramfs(){ local DESTDIR=$RAMFS
( cd $DESTDIR
  _version_increment
  ldd /lib/* 2>&1 | grep 'not found' | sort | uniq | awk 'BEGIN{ORS=" "}{print $1}'
  head -n1 /etc/passwd > etc/passwd
  head -n1 /etc/group  > etc/group
  [ -d $BWD/_local ] && cp -r $BWD/_local/* ./
  local f; for f in version release
  do cat $BUILD/$f > etc/$f
  done
  echo $DESTARCH >etc/arch
  mkdir -p $SOURCES/release
  ldconfig -r $DESTDIR -c etc/ld.so.conf        &&
  #cp -rv $SOURCES/busybox         ./bin/        &&
  #cp $SOURCES/usplash     bin/                  &&
  mknod -m 660 dev/console c 5 1                &&
  mknod -m 660 dev/loop0   b 7 0                &&
  mknod -m 660 dev/ram     b 1 0                &&
  ln -s /etc/rc ./init                          &&
  _steal_app openssl mkfs.ext4 fsck.ext2 \
         switch_root fsck.ext4 sed tar ar       &&
  bash -n                         ./etc/rc      &&
  chmod a+x                       ./etc/rc      &&
  chmod a+x                       ./bin/*       &&
  find . | cpio -H newc -o | gzip >$RAMFS.gz; ) &&
  cp $RAMFS.gz $SOURCES/release/ && sync; }; }

preinstall(){
  _arch_hook install
  mkdir -p $DESTDIR/.gear
  rm -f $DESTDIR/usr; ln -sf '.' $DESTDIR/usr
  echo $EXTENSION > $DESTDIR/.gear/extension; }

image(){
  # (: build squashfs-image :)
  printf "${_BPP}[\e[32mbuilding gearos/%s\e[0m] " $EXTENSION >&2
  ldconfig -r $DESTDIR -c $DESTDIR/etc/ld.so.conf
  rm -f  $SOURCES/$EXTENSION.img
  ( cd $DESTDIR; mksquashfs ./ $SOURCES/$EXTENSION.img -all-root -comp xz; )
  printf "${_BPP}\e[1;41m GEAR\e[44m%s\e[45m%s \e[0m $SOURCES/$EXTENSION.img \e[1;41m %s \e[0m\n" $VERSION $RELEASE $(du -h $SOURCES/$EXTENSION.img|cut -f1) >&2; }

upload(){
  sudo chown -R $USER:$USER $SOURCES/linux
  ssh root@lua "mkdir -p /var/www/html/gear0x/lastest/$DESTARCH"
  [ -f "$(dirname $KERNEL_IMAGE)/vmlinux.gz" ] || (
    printf '[\e[32mkernel\e[0m]' >&2
    cd $(dirname $KERNEL_IMAGE)
    gzip -ky $(basename $KERNEL_IMAGE) >&2;
    mv $(basename $KERNEL_IMAGE).gz vmlinux.gz >&2;
    scp $(dirname $KERNEL_IMAGE)/vmlinux.gz root@lua:/var/www/html/gear0x/lastest/$DESTARCH/; )
  printf '[\e[32mramfs\e[0m]' >&2
  scp $SOURCES/initramfs.gz root@lua:/var/www/html/gear0x/lastest/$DESTARCH/
  printf '[\e[32mfirmware\e[0m]' >&2
  # scp $SOURCES/firmware.img root@lua:/var/www/html/gear0x/lastest/$DESTARCH/
  printf '[\e[32mstick\e[0m]' >&2
  scp $SOURCES/stick.img.gz root@lua:/var/www/html/gear0x/lastest/$DESTARCH/
  printf '[\e[32mchmod\e[0m]' >&2
  ssh root@lua "chmod -R a+r /var/www/html/gear0x/lastest/$DESTARCH"; }

bootfs_default(){
  mkfs.ext2 ${PART}; }

bootloader_default(){ printf \
'DEFAULT linux\nLABEL linux\n'\
'KERNEL /boot/%s\n'\
'APPEND init=/etc/rc norootdev initrd=/boot/%s'\
 $(basename $KERNEL_IMAGE) $(basename $RAMFS.gz)\
> mnt/boot/extlinux.conf &&
  install-mbr --force $DEVICE &&
  extlinux -i mnt/boot >&2; }

stick(){
  [ -z "$DEVICE" ] && { echo no DEVICE:"'$DEVICE'"; return 0; }
  [ -w "$DEVICE" ] || { echo nw DEVICE:"'$DEVICE'"; return 1; }
  export PART=${DEVICE}1
  dd if=/dev/zero of=$DEVICE bs=1M count=1      &&
  cat /usr/lib/EXTLINUX/mbr.bin >$DEVICE        &&
  parted -ms $DEVICE mktable msdos              &&
  parted -ms $DEVICE mkpart primary 1 500M      && # FIXME FIRMWARE-FULL
  parted $DEVICE set 1 boot on                  &&
  _arch_hook bootfs                             &&
  mkdir -p mnt                                  &&
  mount ${PART}          mnt                 &&
  cp -rf $DESTDIR/*         mnt/                &&
  mkdir -p                  mnt/boot            &&
  cp -rv $SOURCES/linux.img mnt/                && # FIXME FIRMWARE-FULL
  cp     $KERNEL_IMAGE      mnt/boot/           &&
  cp     $RAMFS.gz          mnt/boot/           &&
  cp     $SOURCES/release/* mnt/boot/           &&
  _arch_hook bootloader && sync && umount mnt; }

update_stick(){
  [ -z "$DEVICE" ] && { echo no DEVICE:"'$DEVICE'"; return 0; }
  [ -w "$DEVICE" ] || { echo nw DEVICE:"'$DEVICE'"; return 1; }
  export PART=${DEVICE}1
  mkdir -p mnt                                  &&
  mount ${PART}          mnt                 &&
  mkdir -p                  mnt/boot            &&
  rsync -rav $DESTDIR/*         mnt/             &&
  rsync -rav $SOURCES/linux.img mnt/             && # FIXME FIRMWARE-FULL
  rsync     $KERNEL_IMAGE      mnt/boot/        &&
  rsync     $RAMFS.gz          mnt/boot/        &&
  rsync     $SOURCES/release/* mnt/boot/        &&
  _arch_hook bootloader && sync && umount mnt; }

softstick(){
  FILE="$SOURCES/stick.img"
  DEVICE="/dev/loop0"
  export PART=${DEVICE}p1
  ln -s /dev/loop0p1 /dev/loop01
  fallocate -l 2G $FILE                         &&
  losetup /dev/loop0 $FILE                      &&
  dd if=/dev/zero of=$DEVICE bs=1M count=1      &&
  cat /usr/lib/SYSLINUX/mbr.bin >$DEVICE        &&
  parted -ms $DEVICE mktable msdos              &&
  parted -ms $DEVICE mkpart primary 1 200M      &&
  parted $DEVICE set 1 boot on                  &&
  kpartx /dev/loop0                             &&
  _arch_hook bootfs                             &&
  mkdir -p mnt                                  &&
  mount ${DEVICE}p1        mnt                  &&
  cp -rf $DESTDIR/*        mnt/                 &&
  mkdir -p                 mnt/boot             &&
  cp    $KERNEL_IMAGE      mnt/boot/            &&
  cp    $RAMFS.gz          mnt/boot/            &&
  cp    $SOURCES/release/* mnt/boot/            &&
  _arch_hook bootloader && sync && umount mnt;
  rm -f /dev/loop01
  losetup -d /dev/loop0;
  sync; gzip $SOURCES/stick.img; }
