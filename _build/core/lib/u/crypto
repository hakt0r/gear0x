#!/bin/sh

rm -f /system
mkdir -p /run/crypto

enumerate(){ local i=0
  [ -e $1 ] || { echo $1; return 0; }
  while [ -e $1$i ]
    do i=$(( $i +  1 )); [ "$i" -gt 255 ] && break
  done; echo $1$i; }

free_mount(){ basename $(enumerate /dev/mapper/luks); }

crypto_devs(){ blkid | awk '{gsub(/:/,"")}/[^ 0-9]+[0-9]+ .*crypto_LUKS/{print $1}'| sort; }
crypto_shortdev(){ crypto_devs | sed 's/.*\///'; }
crypto_list(){ find /run/crypto/* -type d; }
crypto_dest_list(){ local d; cat /run/crypto/*/dest | while read d; do basename $d;done 2>/dev/null; }

_log(){ while read line; do usplash -l "$1$line"; done; }
cryptomount(){
  usplash -d ainstall
  local userpass= keys_available= devs_unlocked=:
   keys_available=$(ls /run/crypto/*/key 2>/dev/null && echo true || echo false)
  $keys_available || userpass=$(udg -H "$(printf "\e[43;30m Enter Password ")" -P)
  ( local dev= newkeys=true unmapped=true
  while $newkeys; do newkeys=false; for dev in $(crypto_devs); do
    local block=$dev mapdev= boot= short= name= dest= uuid= success=false
    echo "$devs_unlocked" | grep -q ":$block:" && continue
    uuid=$( blk_uuid $dev ); [ -n "$block" ]   || continue
    short=$( basename $block )
    mapdev=$( cat /run/crypto/$short/map 2>/dev/null || free_mount )
    boot=/run/crypto/$short/mount
    mkdir -p $boot
    usplash -i acrypto -t " crypto [ try: $short ] " -a:
    if $keys_available
    then for key in $(ls /run/crypto/*/mount/$uuid 2>/dev/null)
      do
        usplash -i acrypto -t " crypto [ try: $short:$(basename $key) ] " -a:
        if cat $key | cryptsetup -T1 luksOpen $block $mapdev 2>/dev/null
        then success=true; break; fi
      done; fi
    $success ||
    { usplash -i acrypto -t " crypto [ try: $short:password ] " -a:
      [ -n "$userpass" ] && printf "%s" "$userpass" | cryptsetup -T1 luksOpen $block $mapdev; } &&
    devs_unlocked="$devs_unlocked$block:"              &&
    mount /dev/mapper/$mapdev $boot                    &&
    [ -d $boot/.gearos -a -f $boot/.gearos/mount ]     &&
                      dest=$(cat $boot/.gearos/mount ) &&
    [ -n "$dest" ] && name=$( basename $dest)          &&
    [ -n "$name" ] && cryptomount_write                &&
    run_hook "cryptomount_$name"
  done; done; unset userpass;
  [ -f /run/crypto/boot ] && kill -9 $(cat /run/crypto/boot)
  ( echo $$ >/run/crypto/boot;
  for dest in $(crypto_dest_list)
    do run_hook "cryptomount_post$(basename $dest)"
  done; rm /run/crypto/boot; ) & ) 2>&1 | _log & }

cryptomount_write(){ [ -n "$block" ] || return
  mkdir -p /run/crypto/$short
  [ -e "/dev/mapper/$mapdev" ] && echo $mapdev >/run/crypto/$short/map
  [ -e "$block" ] && echo $block >/run/crypto/$short/block;
  [ -n "$dest" ]  && echo $dest >/run/crypto/$short/dest;
  [ -n "$name" ]  && touch /run/crypto/$short/$name; true; }

cryptomount_key(){ keys_available=true; newkeys=true; }
cryptomount_home(){ echo $dest > /run/crypto/$short/postsystem_mount; }
cryptomount_storage(){ cryptomount_home; }
cryptomount_system(){
  grep -qI /$dest /proc/mounts &&
  grep -qI $boot  /proc/mounts && return 0
  mkdir -p /$dest
  mount -o bind $boot /$dest   || return 1
  local ok=true
  for mnt in dev proc boot run sys lib/firmware lib/modules
  do
    mkdir -p /$dest/$mnt
    mount -o bind /$mnt /$dest/$mnt || { ok=false; break; }
  done; $ok || return 1
  for file in resolv.conf fstab hostname hosts
    do cat /etc/$file >/$dest/etc/$file 2>/dev/null
  done;
  rm -f /$dest/etc/mtab; ln -sf /proc/mounts /$dest/etc/mtab;
  true; }

cryptomount_postsystem(){ local dev= dest= boot=
  for dev in $(ls /run/crypto/*/postsystem_mount 2>/dev/null)
  do boot=$(dirname $dev)/mount; dest=$(cat $dev)
    echo "move: $boot -> /$dest"
    [ -n "$boot" -a -n "$dest" ] || continue
    mkdir -p /$dest
    mount --move $boot /$dest
  done
  usplash -q". /lib/u/gear; crypto_boot; echo boot failed; exec /bin/bash"; }

crypto_boot(){
  reset; clear; printf "\e[43;30m booting debian $$ \e[0m\n"
  killall -9 dropbear
  touch /run/trystart
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  ln -sf /proc/mounts /system/etc/mtab
  mkdir -p /system/lib/modules
  exec /bin/switch_root /system /bin/systemd; }
