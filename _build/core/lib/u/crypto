#!/bin/sh

enumerate(){ local i=0
  [ -e $1 ] || { echo $1; return 0; }
  while [ -e $1$i ]
    do i=$(( $i +  1 )); [ "$i" -gt 255 ] && break
  done; echo $1$i; }

free_mount(){ basename $(enumerate /dev/mapper/luks); }

crypto_devs(){ blkid | awk '{gsub(/:/,"")}/[^ 0-9]+[0-9]+ .*crypto_LUKS/{print $1}'; }
crypto_shortdev(){ crypto_devs | sed 's/.*\///'; }
crypto_list(){ find /run/crypto/* -type d; }
crypto_dest_list(){ local d; cat /run/crypto/*/dest | while read d; do basename $d;done 2>/dev/null; }

cryptomount(){
  local userpass= keys_available=
   keys_available=$(ls /run/crypto/*/key 2>/dev/null && echo true || echo false)
  $keys_available || userpass=$(usplash -H "Password" -P)
  ( exec >>/run/crypto/log 2>&1
  local dev= newkeys=true unmapped=true
  while $newkeys; do newkeys=false; for dev in $(crypto_devs); do
    local block=$dev mapdev= boot= short= name= dest= uuid= success=false
    uuid=$( blk_uuid $dev ); [ -n "$block" ] || continue
    short=$( basename $block )
    mapdev=$( cat /run/crypto/$short/map 2>/dev/null || free_mount )
    boot=/run/crypto/$short/mount
    mkdir -p $boot
    if $keys_available
    then for key in $(ls /run/crypto/*/mount/$uuid 2>/dev/null)
      do if cat $key | cryptsetup -T1 luksOpen $block $mapdev 2>/dev/null
        then success=true; break; fi
      done; fi
    $success ||
    { [ -n "$userpass" ] && printf "%s" "$userpass" | cryptsetup -T1 luksOpen $block $mapdev 2>/dev/null; } &&
    mount /dev/mapper/$mapdev $boot                    &&
    [ -d $boot/.gearos -a -f $boot/.gearos/mount ]     &&
                      dest=$(cat $boot/.gearos/mount ) &&
    [ -n "$dest" ] && name=$( basename $dest)          &&
    [ -n "$name" ] && cryptomount_write                &&
    run_hook "cryptomount_$name"
  done; done; unset userpass;
  [ -f /run/crypto/boot ] && kill -9 $(cat /run/crypto/boot)
  ( echo $$ >/run/crypto/boot; sleep 0.5
  for dest in $(crypto_dest_list)
    do run_hook "cryptomount_post$(basename $dest)"
  done; rm /run/crypto/boot; ) & ) & }

cryptomount_write(){ [ -n "$block" ] || return
  mkdir -p /run/crypto/$short
  [ -e "/dev/mapper/$mapdev" ] && echo $mapdev >/run/crypto/$short/map
  [ -e "$block" ] && echo $block >/run/crypto/$short/block;
  [ -n "$dest" ]  && echo $dest >/run/crypto/$short/dest;
  [ -n "$name" ]  && touch /run/crypto/$short/$name; true; }

cryptomount_key(){ keys_available=true; newkeys=true; }
cryptomount_home(){ echo $dest > /run/crypto/$short/postsystem_mount; }
cryptomount_storage(){ cryptomount_home; }
cryptomount_system(){
  grep -qI /$dest /proc/mounts &&
  grep -qI $boot  /proc/mounts && return 0
  mkdir -p /$dest
  mount -o bind $boot /$dest   || return 1
  local ok=true
  for mnt in dev proc boot run sys lib/firmware lib/modules
  do
    mkdir -p /$dest/$mnt
    mount -o bind /$mnt /$dest/$mnt || { ok=false; break; }
  done; $ok || return 1
  for file in resolv.conf fstab hostname hosts
    do cat /etc/$file />$dest/etc/$file 2>/dev/null
  done;
  rm -f /etc/mtab; ln -sf /proc/mounts /$dest/etc/mtab; }

cryptomount_postsystem(){ local dev= dest= boot=
  for dev in $(ls /run/crypto/*/postsystem_mount 2>/dev/null)
  do boot=$(dirname $dev)/mount; dest=$(cat $dev)
    echo "move: $boot -> /$dest"
    [ -n "$boot" -a -n "$dest" ] || continue
    mkdir -p /$dest
    mount --move $boot /$dest
  done
  usplash -q ". /lib/u/gear; crypto_boot"; }

crypto_boot(){
  killall -9 dropbear
  touch /run/trystart
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  rm /system/init
  ln /system/lib/systemd/systemd /system/init
  ln -sf /proc/mounts /system/etc/mtab
  reset; clear; printf "\e[43;30m booting debian $$ \e[0m\n"
  exec switch_root /system /init; }
