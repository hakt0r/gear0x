#!/bin/sh

_arch_hook(){ local hook=$1; shift
  if _exists ${hook}_$DESTARCH
  then ${hook}_$DESTARCH "$@"
  else ${hook}_default "$@";fi; }

_arch_file(){
  local t=; [ -n "$1" ] && t=_$1
  find $(find $BUILD -type d -name arch) -type f -name "$DESTARCH$t"; }

_arch_include(){
  local t=; [ -n "$1" ] && t=_$1
  local f=$(find -L $BUILD -type f -name "$DESTARCH$t")
  [ -f "$f" ] && . "$f"; }

__exec_default(){
  PATH=/bin:/sbin:/usr/bin:/usr/sbin chroot $1 /bin/sh -c "$2"; }

crossinit_default(){ :; }

stick_default(){
  [ -z "$DEVICE" ] && { echo no $DEVICE; return 0; }
  [ -w "$DEVICE" ] || { echo no $DEVICE; return 1; }
  [ -f $SOURCES/gearos.img ] || return 1

  dd if=/dev/zero of=$DEVICE bs=1M count=1             &&
  cat /usr/lib/syslinux/mbr/mbr.bin >$DEVICE           &&
  sudo parted -ms $DEVICE mktable msdos                &&
  sudo parted -ms $DEVICE mkpart primary 1 1000M       &&
  sudo parted $DEVICE set 1 boot on                    &&
  mkfs.ext2 ${DEVICE}1                                 &&
  mkdir -p mnt                                         &&
  mount ${DEVICE}1 mnt                                 &&
  cp -rf $DESTDIR/* mnt/                               &&
  mkdir -p mnt/boot                                    &&
  cp    $KERNEL_IMAGE mnt/boot/                        &&
  cp    $RAMFS.gz     mnt/boot/                        &&
  printf 'DEFAULT linux\nLABEL linux\n'\
'KERNEL /boot/%s\n'\
'APPEND quiet init=/etc/rc norootdev initrd=/boot/%s' \
$(basename $KERNEL_IMAGE) $(basename $RAMFS.gz) \
>mnt/boot/extlinux.conf &&
  extlinux -i       mnt/boot                           &&
  sync
  umount mnt

  sync
  _arch_hook __qemu          \
   -boot c                   \
   -hdb $SOURCES/storage.img \
   -hda $DEVICE;             }
